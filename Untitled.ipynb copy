{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(81, 237) \n",
      "\n",
      "(211, 196) \n",
      "\n",
      "(238, 179) \n",
      "\n",
      "(91, 177) \n",
      "\n",
      "(44, 177) \n",
      "\n",
      "(223, 167) \n",
      "\n",
      "(11, 131) \n",
      "\n",
      "(152, 87) \n",
      "\n",
      "(25, 83) \n",
      "\n",
      "(94, 68) \n",
      "\n",
      "(195, 11) \n",
      "\n",
      "(15, 3) \n",
      "\n",
      "(228, 3) \n",
      "\n"
     ]
    }
   ],
   "source": [
    "import requests, time, StringIO, operator\n",
    "from PIL import Image\n",
    "\n",
    "src = '/Users/mko_san/Downloads/score.png'\n",
    "url = 'http://www.python-challenges.com/psb/static/img/star_wars/star_wars.png'\n",
    "r = requests.get(url)\n",
    "im = Image.open(StringIO.StringIO(r.content))\n",
    "#score = Image.open(src)\n",
    "\n",
    "colors ={}\n",
    "\n",
    "for pixel in im.getdata():\n",
    "    if pixel:\n",
    "        color_key = pixel\n",
    "        if color_key  not in colors:\n",
    "            colors[color_key] = 0\n",
    "        colors[color_key] += 1\n",
    "\n",
    "sorted_colors = sorted(colors.items(), key=operator.itemgetter(1))\n",
    "sorted_colors.reverse()\n",
    "for color in sorted_colors:\n",
    "    print color, '\\n'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(15, 3)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(81, 147)\n",
    "(91, 143)\n",
    "(238, 107)\n",
    "(223, 105)\n",
    "(152, 78)\n",
    "(11, 73)\n",
    "(211, 71)\n",
    "(25, 55)\n",
    "(94, 26)\n",
    "(195, 9)\n",
    "(44, 4)\n",
    "(228, 4)\n",
    "(15, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'csrfmiddlewaretoken': '6IfswJGfOOTIg8OHwhcSPDKGnbaCEheBrQyMsA1iFMmpYAtEsMJQueiNTKqYSN6m', 'xxx': 20, 'yyy': 30}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "{'csrfmiddlewaretoken': u'tS5elQHiuYHyt2HrgdumkaAJ9JGRCRefO0oyhH2llWafbumocI1kZL8QFiWdQn60', 'xxx': None, 'yyy': None}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "91\n",
      "91\n",
      "{'csrfmiddlewaretoken': u'Eyci0QlIQHNPbf4N2AJLrNuHyP6qvHxKZGvCWHGLHFgwTHJKY5gJ6o2O4omMJdpv', 'xxx': 12, 'yyy': 74}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "211\n",
      "{'csrfmiddlewaretoken': u'LWRbAvac23JXkqGHlcCXBN8xTeThWoxh64avwmvfT1cE2SlEhH9VgoGEpN9DaUp2', 'xxx': 10, 'yyy': 74}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "91\n",
      "{'csrfmiddlewaretoken': u'choiU9LMKBNoWAKkdAAzvSHacc9NvOxCxpHCQ06PBzg5E2ph957xatfhILp9Jkpn', 'xxx': 10, 'yyy': 81}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "91\n",
      "91\n",
      "{'csrfmiddlewaretoken': u'XyX4UTmwi2zihwY67NHaY7asyyOG2o13iGgoQKHz902ZZYD33ie8DIIz4742gUTO', 'xxx': 12, 'yyy': 81}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "91\n",
      "91\n",
      "{'csrfmiddlewaretoken': u'HPUcy5OZOmCyqUepYzbFCBd3qU1GHcKU2XdwuW92Fk5f8mTmU4IDhcLaWth2VICF', 'xxx': 14, 'yyy': 81}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "91\n",
      "91\n",
      "{'csrfmiddlewaretoken': u'3P2dIxFhWBkrppiNZsshswa7UPMoAS9FoXlxEo0kNzN87RXKVXZf77Ieqo2KOo1q', 'xxx': 16, 'yyy': 81}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "91\n",
      "91\n",
      "{'csrfmiddlewaretoken': u'JsjIC4oIIUKEimKst9TXHXroQFx7TX5i4AC2yVJLzSdl0OpppEqVmyZvmeNt7tX3', 'xxx': 18, 'yyy': 81}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "0\n",
      "91\n",
      "{'csrfmiddlewaretoken': u'yFmhHwAAstxArqbhR0I4EOaxMiDMeO0KTNFBDnVDjr0h9SQeNvf2jpIEiRT8skSv', 'xxx': 22, 'yyy': 72}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "0\n",
      "91\n",
      "{'csrfmiddlewaretoken': u'ayj5F3xrvJ63gKXoCo9cbvY4xFcaVQBQvGCpBUSumHzKYcClyTGaQ6wb3esw9mtB', 'xxx': 20, 'yyy': 72}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "0\n",
      "91\n",
      "{'csrfmiddlewaretoken': u'Mamy3dBl8uAl9d1C0ouTFYVzYyor0h5X7iFSZ4WoZs32RFGzWT1RkztGu7ENeNXI', 'xxx': 18, 'yyy': 72}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "94\n",
      "94\n",
      "94\n",
      "{'csrfmiddlewaretoken': u'd23hMnItm16vA71pvW4JelLK2sWxvHtRyamBIe3wdZzcizGmrrBHTWjRy1cTJdlC', 'xxx': 22, 'yyy': 72}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "91\n",
      "91\n",
      "{'csrfmiddlewaretoken': u'1b1x0FWKkWOWA3eikj0hfWnMQFCGTNTmmjkRWwhNbUhDivTfgOxfUxVTmeS27jL7', 'xxx': 16, 'yyy': 72}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "91\n",
      "91\n",
      "{'csrfmiddlewaretoken': u'ftBtnhBDyutp3ShOSxr7efa0HKko3AwMABUNj8WGpsW6LkWLO2Y5TQI7djAKh6ox', 'xxx': 14, 'yyy': 72}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "94\n",
      "94\n",
      "94\n",
      "{'csrfmiddlewaretoken': u'zL3dk7L8P5LVEERBLuiPQDJVMfxbee3mUTmxgY6bG3eCm6wyHZPNveh2iONxsKV7', 'xxx': 18, 'yyy': 72}\n",
      "{'csrftoken': '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'}\n",
      "91\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-42-e44bdaff3dcb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m         \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m \u001b[0mpaint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'6IfswJGfOOTIg8OHwhcSPDKGnbaCEheBrQyMsA1iFMmpYAtEsMJQueiNTKqYSN6m'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-42-e44bdaff3dcb>\u001b[0m in \u001b[0;36mpaint\u001b[0;34m(initial_x, initial_y, token, cookie)\u001b[0m\n\u001b[1;32m    111\u001b[0m         }\n\u001b[1;32m    112\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m         \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    114\u001b[0m \u001b[0mpaint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'6IfswJGfOOTIg8OHwhcSPDKGnbaCEheBrQyMsA1iFMmpYAtEsMJQueiNTKqYSN6m'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m'6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "import requests, time\n",
    "from scrapy.selector import Selector\n",
    "import requests, time, StringIO, operator\n",
    "from PIL import Image\n",
    "\n",
    "url = 'http://www.python-challenges.com/psb/UWK77TDD/star_wars'\n",
    "xpath = '/html/body/div[2]/div/div[2]/form/input/@value'\n",
    "xpath_post = '/html/body/div/div/div/form/input/@value'\n",
    "timeout = 60*5+1\n",
    "board_max = 99\n",
    "\n",
    "def getxy(x, y, initial_x, initial_y):\n",
    "    xdiff = x-initial_x\n",
    "    ydiff = y-initial_y\n",
    "    if xdiff == ydiff:\n",
    "        x += 2\n",
    "        y += 4\n",
    "    elif xdiff+2 == ydiff:\n",
    "        x += 2\n",
    "        y -=2\n",
    "    elif xdiff-2 == ydiff:\n",
    "        x -= 2\n",
    "    return x,y\n",
    "\n",
    "\n",
    "def next_move():\n",
    "    our_colors = [94, 11]\n",
    "    last_move = None\n",
    "    src = '/Users/mko_san/Downloads/score.png'\n",
    "    url = 'http://www.python-challenges.com/psb/static/img/star_wars/star_wars.png'\n",
    "    r = requests.get(url)\n",
    "    im = Image.open(StringIO.StringIO(r.content))\n",
    "    score = Image.open(src)\n",
    "\n",
    "    colors ={}\n",
    "\n",
    "    for pixel in im.getdata():\n",
    "        if pixel and pixel not in our_colors:\n",
    "            color_key = pixel\n",
    "            if color_key  not in colors:\n",
    "                colors[color_key] = 0\n",
    "            colors[color_key] += 1\n",
    "\n",
    "    sorted_colors = sorted(colors.items(), key=operator.itemgetter(1))\n",
    "    sorted_colors.reverse()\n",
    "    color_best = sorted_colors[0][0]\n",
    "\n",
    "    pixels = score.load() # this is not a list, nor is it list()'able\n",
    "    width, height = score.size\n",
    "    score_pixels = []\n",
    "    for x in range(height):\n",
    "        pixel_row = []\n",
    "        for y in range(100):\n",
    "            cpixel = pixels[x, y]\n",
    "            pixel_row.append(cpixel)\n",
    "        score_pixels.append(pixel_row)\n",
    "\n",
    "    pixels = im.load() # this is not a list, nor is it list()'able\n",
    "    width, height = im.size\n",
    "    for x in range(height):\n",
    "        pixel_row = []\n",
    "        for y in range(100):\n",
    "            cpixel = pixels[x, y]\n",
    "            if cpixel == color_best and cpixel!=score_pixels[x][y]:\n",
    "                print score_pixels[x][y]\n",
    "                last_move = (x,y)\n",
    "                break\n",
    "                \n",
    "    if not last_move:\n",
    "        color_best = sorted_colors[1][0]\n",
    "        for x in range(height):\n",
    "            pixel_row = []\n",
    "            for y in range(100):\n",
    "                cpixel = pixels[x, y]\n",
    "                if cpixel == color_best and cpixel!=score_pixels[x][y]:\n",
    "                    print score_pixels[x][y]\n",
    "                    last_move = (x,y)\n",
    "                    break        \n",
    "        \n",
    "    if not last_move:\n",
    "        return (None, None)\n",
    "    im.save(src)\n",
    "    return last_move\n",
    "\n",
    "def paint(initial_x=None, initial_y=None, token=None, cookie=None):\n",
    "    x = initial_x\n",
    "    y = initial_y\n",
    "    csfr = token\n",
    "    cookie = {'csrftoken': cookie}\n",
    "    if not csfr:\n",
    "        r = requests.get(url)\n",
    "        cookie = {'csrftoken': r.cookies['csrftoken']}\n",
    "        csfr = Selector(text=r.content.decode()).xpath(xpath).extract().pop()\n",
    "        time.sleep(timeout)\n",
    "    data = {\n",
    "        'xxx': initial_x,\n",
    "        'yyy': initial_y,\n",
    "        'csrfmiddlewaretoken': csfr,\n",
    "    }\n",
    "    while True:\n",
    "        print data\n",
    "        r = requests.post(url, data=data, cookies=cookie)\n",
    "        cookie['csrftoken'] = r.cookies['csrftoken']\n",
    "        csfr = Selector(text=r.content.decode()).xpath(xpath_post).extract().pop()\n",
    "        print cookie\n",
    "        x, y = next_move()\n",
    "        data = {\n",
    "            'xxx': x,\n",
    "            'yyy': y,\n",
    "            'csrfmiddlewaretoken': csfr,\n",
    "        }\n",
    "\n",
    "        time.sleep(timeout)\n",
    "paint(20, 74, '6Wi9AQ1PeeImqlBYquzAF8sqxlS3Ba50r4BtwHmS5cb38NgVmZ6ykJ0x3U8pPGXL','u'zL3dk7L8P5LVEERBLuiPQDJVMfxbee3mUTmxgY6bG3eCm6wyHZPNveh2iONxsKV7', )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import requests, time, StringIO, operator\n",
    "from PIL import Image\n",
    "\n",
    "def next_move():\n",
    "    our_colors = [94, 11]\n",
    "    last_move = None\n",
    "    src = '/Users/mko_san/Downloads/score.png'\n",
    "    url = 'http://www.python-challenges.com/psb/static/img/star_wars/star_wars.png'\n",
    "    r = requests.get(url)\n",
    "    im = Image.open(StringIO.StringIO(r.content))\n",
    "    score = Image.open(src)\n",
    "\n",
    "    colors ={}\n",
    "\n",
    "    for pixel in im.getdata():\n",
    "        if pixel and pixel not in our_colors:\n",
    "            color_key = pixel\n",
    "            if color_key  not in colors:\n",
    "                colors[color_key] = 0\n",
    "            colors[color_key] += 1\n",
    "\n",
    "    sorted_colors = sorted(colors.items(), key=operator.itemgetter(1))\n",
    "    sorted_colors.reverse()\n",
    "    color_best = sorted_colors[0][0]\n",
    "\n",
    "    pixels = score.load() # this is not a list, nor is it list()'able\n",
    "    width, height = score.size\n",
    "    score_pixels = []\n",
    "    for x in range(height):\n",
    "        pixel_row = []\n",
    "        for y in range(100):\n",
    "            cpixel = pixels[x, y]\n",
    "            pixel_row.append(cpixel)\n",
    "        score_pixels.append(pixel_row)\n",
    "\n",
    "    pixels = im.load() # this is not a list, nor is it list()'able\n",
    "    width, height = im.size\n",
    "    for x in range(height):\n",
    "        pixel_row = []\n",
    "        for y in range(100):\n",
    "            cpixel = pixels[x, y]\n",
    "            if cpixel == color_best and cpixel!=score_pixels[x][y]:\n",
    "                print score_pixels[x][y]\n",
    "                last_move = (x,y)\n",
    "                break\n",
    "                \n",
    "    if not last_move:\n",
    "        color_best = sorted_colors[1][0]\n",
    "        for x in range(height):\n",
    "            pixel_row = []\n",
    "            for y in range(100):\n",
    "                cpixel = pixels[x, y]\n",
    "                if cpixel == color_best and cpixel!=score_pixels[x][y]:\n",
    "                    print score_pixels[x][y]\n",
    "                    last_move = (x,y)\n",
    "                    break        \n",
    "        \n",
    "    if not last_move:\n",
    "        return None\n",
    "    im.save(src)\n",
    "    return last_move\n",
    "print next_move()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
